// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Complex types Complex test for PropTypes 1`] = `
"PropTypes.shape({
  foo: PropTypes.oneOfType(
    PropTypes.string,
    PropTypes.number,
    PropTypes.bool,
    PropTypes.arrayOf(PropTypes.oneOfType(PropTypes.number, PropTypes.string)),
    PropTypes.func,
    PropTypes.shape({
      mandatory: PropTypes.bool.isRequired,
      bar: PropTypes.string,
      hello: PropTypes.string
    })
  ),
  bax: PropTypes.arrayOf(PropTypes.string),
  bar: PropTypes.array,
  mixed: PropTypes.arrayOf(
    PropTypes.oneOfType(PropTypes.number, PropTypes.string)
  ),
  empty: PropTypes.shape({})
})"
`;

exports[`Complex types Complex test for PropTypes 2`] = `
"const Root = PropTypes.shape({
  foo: RootFoo,
  bax: PropTypes.arrayOf(PropTypes.string),
  bar: PropTypes.array,
  mixed: PropTypes.arrayOf(
    PropTypes.oneOfType(PropTypes.number, PropTypes.string)
  ),
  empty: RootEmpty
})
const RootFoo = PropTypes.oneOfType(
  PropTypes.string,
  PropTypes.number,
  PropTypes.bool,
  PropTypes.arrayOf(PropTypes.oneOfType(PropTypes.number, PropTypes.string)),
  PropTypes.func,
  PropTypes.shape({
    mandatory: PropTypes.bool.isRequired,
    bar: PropTypes.string,
    hello: PropTypes.string
  })
)
const RootEmpty = PropTypes.shape({})
"
`;

exports[`Complex types Complex test for TypeScript 1`] = `
"{
  foo?:
    | null
    | string
    | number
    | boolean
    | Array<number | string>
    | { (): any }
    | {
        mandatory: boolean,
        bar?: string,
        hello?: string
      },
  bax?: Array<string>,
  bar?: Array<any>,
  mixed?: Array<number | string>,
  empty?: {}
}"
`;

exports[`Complex types Complex test for TypeScript 2`] = `
"type Root = {
  foo?: RootFoo,
  bax?: Array<string>,
  bar?: Array<any>,
  mixed?: Array<number | string>,
  empty?: RootEmpty
}
type RootFoo =
  | null
  | string
  | number
  | boolean
  | Array<number | string>
  | { (): any }
  | {
      mandatory: boolean,
      bar?: string,
      hello?: string
    }
type RootEmpty = {}
"
`;

exports[`Complex types Union types for root definition for TypeScript 1`] = `"{ foo: string } | Array<string>"`;

exports[`Complex types Union types for root definition for TypeScript 2`] = `
"type Root = { foo: string } | Array<string>
"
`;

exports[`Simple types Simple test for PropTypes 1`] = `
"PropTypes.shape({
  \\"first name\\": PropTypes.string.isRequired,
  \\"last name\\": PropTypes.string
})"
`;

exports[`Simple types Simple test for PropTypes 2`] = `
"const Root = PropTypes.shape({
  \\"first name\\": PropTypes.string.isRequired,
  \\"last name\\": PropTypes.string
})
"
`;

exports[`Simple types Simple test for TypeScript 1`] = `
"{
  \\"first name\\": string,
  \\"last name\\"?: string
}"
`;

exports[`Simple types Simple test for TypeScript 2`] = `
"type Root = {
  \\"first name\\": string,
  \\"last name\\"?: string
}
"
`;
